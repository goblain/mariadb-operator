/*
Copyright 2018 The mariadb-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/goblain/mariadb-operator/pkg/apis/mariadb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MariaDBClusterLister helps list MariaDBClusters.
type MariaDBClusterLister interface {
	// List lists all MariaDBClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MariaDBCluster, err error)
	// MariaDBClusters returns an object that can list and get MariaDBClusters.
	MariaDBClusters(namespace string) MariaDBClusterNamespaceLister
	MariaDBClusterListerExpansion
}

// mariaDBClusterLister implements the MariaDBClusterLister interface.
type mariaDBClusterLister struct {
	indexer cache.Indexer
}

// NewMariaDBClusterLister returns a new MariaDBClusterLister.
func NewMariaDBClusterLister(indexer cache.Indexer) MariaDBClusterLister {
	return &mariaDBClusterLister{indexer: indexer}
}

// List lists all MariaDBClusters in the indexer.
func (s *mariaDBClusterLister) List(selector labels.Selector) (ret []*v1alpha1.MariaDBCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariaDBCluster))
	})
	return ret, err
}

// MariaDBClusters returns an object that can list and get MariaDBClusters.
func (s *mariaDBClusterLister) MariaDBClusters(namespace string) MariaDBClusterNamespaceLister {
	return mariaDBClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MariaDBClusterNamespaceLister helps list and get MariaDBClusters.
type MariaDBClusterNamespaceLister interface {
	// List lists all MariaDBClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MariaDBCluster, err error)
	// Get retrieves the MariaDBCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MariaDBCluster, error)
	MariaDBClusterNamespaceListerExpansion
}

// mariaDBClusterNamespaceLister implements the MariaDBClusterNamespaceLister
// interface.
type mariaDBClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MariaDBClusters in the indexer for a given namespace.
func (s mariaDBClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MariaDBCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MariaDBCluster))
	})
	return ret, err
}

// Get retrieves the MariaDBCluster from the indexer for a given namespace and name.
func (s mariaDBClusterNamespaceLister) Get(name string) (*v1alpha1.MariaDBCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mariadbcluster"), name)
	}
	return obj.(*v1alpha1.MariaDBCluster), nil
}
